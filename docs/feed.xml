<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://hejohns.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hejohns.github.io/" rel="alternate" type="text/html" /><updated>2023-05-18T21:58:54-04:00</updated><id>https://hejohns.github.io/feed.xml</id><title type="html">hejohns’ jekyll site</title><subtitle>a pure waste of space</subtitle><author><name>hejohns</name><email>(hejohns)α(umich)δ(edu)</email></author><entry><title type="html">equivalence of categories</title><link href="https://hejohns.github.io/category-theory/2023/05/18/equivalence-of-categories.html" rel="alternate" type="text/html" title="equivalence of categories" /><published>2023-05-18T00:00:00-04:00</published><updated>2023-05-18T21:51:35-04:00</updated><id>https://hejohns.github.io/category-theory/2023/05/18/equivalence-of-categories</id><content type="html" xml:base="https://hejohns.github.io/category-theory/2023/05/18/equivalence-of-categories.html"><![CDATA[<p>An oft-stated characterization of an equivalence of categories is that TFAE:</p>
<ol>
  <li>A functor \(F : \mathcal{C} → \mathcal{D}\) is (the forward direction of) an equivalence of categories</li>
  <li>\(F\) is <em>full</em>, <em>faithful</em>, and <em>essentially surjective on objects</em><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></li>
</ol>

<p><strong>pf (1 ⟹ 2):</strong> (you really need to draw the diagrams. I’m not going to try here)</p>

<p>Let \(F : \mathcal{C} → \mathcal{D}\) be an equivalence of categories.</p>
<ul>
  <li>wts \(F\) faithful: assume \(Ff = Fg\), for \(f, g : \mathcal{C}(A, B)\).
Then \(F⁻¹Ff = F⁻¹Fg\).
Let \(α : 1_\mathcal{C} ⇒ F⁻¹F\) witness that F is an equivalence.
Notice that \(α_B ∘ f = F⁻¹Ff ∘ α_A ⟹ α_B ∘ f ∘ α⁻¹_A = F⁻¹Ff\),
and similarly \(α_B ∘ g = F⁻¹Fg ∘ α_A ⟹ α_B ∘ g ∘ α⁻¹_A = F⁻¹Fg\).
Thus \(F⁻¹Ff = F⁻¹Fg ⟹ F⁻¹Fg ∘ α_A ⟹ α_B ∘ f ∘ α⁻¹_A = F⁻¹Fg ∘ α_A ⟹ α_B ∘ g ∘ α⁻¹_A ⟹ f = g\).<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></li>
</ul>

<ul>
  <li>wts \(F\) full: Consider \(h : \mathcal{D}(FA, FB)\).
Then \(α⁻¹_B ∘ F⁻¹h ∘ α_A : \mathcal{C}(A, B)\)
In a roundabout fashion, consider not \(F(α⁻¹_B ∘ F⁻¹h ∘ α_A)\) directly,
but \(F⁻¹F(α⁻¹_B ∘ F⁻¹h ∘ α_A)\).
Actually, our proof above that \(F\) is faithful is symmetric since an equivalence of categories is a symmetric notion, so \(F⁻¹\) is faithful as well.
Notice that \(F⁻¹F(α⁻¹_B ∘ F⁻¹h ∘ α_A) = α_B ∘ f ∘ α⁻¹_A = F⁻¹h\),
and since \(F⁻¹\) is faithful, \(F(α⁻¹_B ∘ F⁻¹h ∘ α_A) = h\).</li>
  <li>wts \(F\) eso:
Let \(β : FF⁻¹ ⇒ 1_\mathcal{D}\) be the other witness that \(\mathcal{C} ≅ \mathcal{D}\).
\(∀X ∈ \mathcal{D}. β_X\) witnesses that \(FF⁻¹X ≅ X\).</li>
</ul>

<p><strong>pf (2 ⟹ 1):</strong></p>

<p>Let \(F\) be fully faithful and eso.
Define \(F⁻¹\) st</p>

<p>TODO: I’m tired. This is Awodey p.174</p>

<p>Amalgamated from Awodey and Rhiel’s books, and the nlab</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>the definitions are standard, but the way I remember it is that <em>faithful</em> := injective on homsets, <em>full</em> := surjective on homsets, <em>eso</em> := surjective on objects, up to isomorphism <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>we make use of the fact that natural transformation ⟹ (natural isomorphism ⟺ each point is an isomorphism) <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>hejohns</name><email>(hejohns)α(umich)δ(edu)</email></author><category term="category-theory" /><summary type="html"><![CDATA[An oft-stated characterization of an equivalence of categories is that TFAE: A functor \(F : \mathcal{C} → \mathcal{D}\) is (the forward direction of) an equivalence of categories \(F\) is full, faithful, and essentially surjective on objects1 the definitions are standard, but the way I remember it is that faithful := injective on homsets, full := surjective on homsets, eso := surjective on objects, up to isomorphism &#8617;]]></summary></entry><entry><title type="html">moving from git to darcs</title><link href="https://hejohns.github.io/site-construction/2023/05/14/darcs.html" rel="alternate" type="text/html" title="moving from git to darcs" /><published>2023-05-14T00:00:00-04:00</published><updated>2023-05-15T04:26:28-04:00</updated><id>https://hejohns.github.io/site-construction/2023/05/14/darcs</id><content type="html" xml:base="https://hejohns.github.io/site-construction/2023/05/14/darcs.html"><![CDATA[<p>I played around with <code class="language-plaintext highlighter-rouge">darcs</code> two summers ago,
but in this day and age everyone uses <code class="language-plaintext highlighter-rouge">git</code> so it’s just not practical when working with other people.</p>

<p>That said, this is my personal site and I can do whatever I want, so I’m firing darcs back up!</p>

<p>The darcs site <a href="http://darcs.net/Using/Convert">has a page</a> for converting between git and darcs and forth,
although I couldn’t get the mark files to work,
and when exporting from darcs to git,
I needed to <code class="language-plaintext highlighter-rouge">sed</code> (or more precisely  <code class="language-plaintext highlighter-rouge">darcs convert export | perl -pe 's#refs/heads/trunk#refs/heads/trunk#g' | (cd ../hejohns.github.io_git-mirror/ &amp;&amp; git fast-import)</code>)
to import into the correct git branch.</p>]]></content><author><name>hejohns</name><email>(hejohns)α(umich)δ(edu)</email></author><category term="site-construction" /><summary type="html"><![CDATA[I played around with darcs two summers ago, but in this day and age everyone uses git so it’s just not practical when working with other people.]]></summary></entry><entry><title type="html">multiple displays and linux graphics modules</title><link href="https://hejohns.github.io/2023/05/10/linux-graphics-modules.html" rel="alternate" type="text/html" title="multiple displays and linux graphics modules" /><published>2023-05-10T00:00:00-04:00</published><updated>2023-05-15T03:04:57-04:00</updated><id>https://hejohns.github.io/2023/05/10/linux-graphics-modules</id><content type="html" xml:base="https://hejohns.github.io/2023/05/10/linux-graphics-modules.html"><![CDATA[<p>So I got a HP z2 mini g3 recently
(to replace an existing dual monitor setup, which is relevant.
The optiplex 780 usff and its core 2 duo E8400 is a real workhorse.),
which has an intel xeon e3-1225 v6
(which could actually replace the pentium G4600 in my T130…<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>)
and a mobile nvidia quadro m620.</p>

<p>The box has four display port ports in the back, along with a BIOS option to send the integrated graphics along one of the ports.
One monitor worked fine. I only had a single display port adaptor<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">2</a></sup>, so I had to wait until today to hook up the second monitor.</p>

<p>But I ran into this strange issue where only one display port would work at a time, integrated graphics disabled,
and when I enabled the integrated graphics to try to run two monitors 1-1, X11 completely failed to start for reasons mere mortals like myself can’t begin to comprehend.
Apparently the red flag should of been the tons of <code class="language-plaintext highlighter-rouge">modprobe</code> ‘key rejected’ or ‘drm’ errors and the like,
and that <code class="language-plaintext highlighter-rouge">systemctl status --failed</code> complained about <code class="language-plaintext highlighter-rouge">nvidia-persistenced</code> and whatever the kernel module loader service is<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">3</a></sup>.</p>

<p>There’s probably a downside to this I should care about but it seems like <em>disabling secure boot</em> does the trick and <code class="language-plaintext highlighter-rouge">systemctl status --failed</code> no longer shows anything.</p>

<p>I actually didn’t try this until I tried updating the BIOS, and one of the steps– which required loading a kernel module– failed due to the signing issue.
I don’t understand security so I’m going w/ the wrong answer for now and just disabling all that stuff.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>especially while the disposition center has the z2 mini g3 ‘s for less than what you typically find just the e3-1225 v6 for… <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>my monitors are old. VGA always works; I guess DVI-D is alright. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>I mean… the single display worked fine with all the errors? <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>hejohns</name><email>(hejohns)α(umich)δ(edu)</email></author><summary type="html"><![CDATA[So I got a HP z2 mini g3 recently (to replace an existing dual monitor setup, which is relevant. The optiplex 780 usff and its core 2 duo E8400 is a real workhorse.), which has an intel xeon e3-1225 v6 (which could actually replace the pentium G4600 in my T130…1) and a mobile nvidia quadro m620. especially while the disposition center has the z2 mini g3 ‘s for less than what you typically find just the e3-1225 v6 for… &#8617;]]></summary></entry><entry><title type="html">shelving studying nonstandard analysis</title><link href="https://hejohns.github.io/2023/05/07/nonstandard-analysis.html" rel="alternate" type="text/html" title="shelving studying nonstandard analysis" /><published>2023-05-07T00:00:00-04:00</published><updated>2023-05-15T03:04:57-04:00</updated><id>https://hejohns.github.io/2023/05/07/nonstandard-analysis</id><content type="html" xml:base="https://hejohns.github.io/2023/05/07/nonstandard-analysis.html"><![CDATA[<p>(personal record keeping)</p>

<p>I’ve whiled away my chances last semester to take a close look at nonstandard analysis while I had the time,
and now I can no longer set aside focus for it in good conscience.
With pressing matters of higher priority, I formally declare, with great regret,
an indefinite hiatus of this project, marked by the returning of Goldblatt’s book.</p>

<p>It was an excellent time to study nonstandard analysis,
on the tails of the excellent model theory class and continuous logic seminar,
but the model theoretic background seems low enough that picking Goldblatt’s book back up should be smooth.</p>

<p>Alas. One day. One day.</p>]]></content><author><name>hejohns</name><email>(hejohns)α(umich)δ(edu)</email></author><summary type="html"><![CDATA[(personal record keeping)]]></summary></entry><entry><title type="html">chili oil</title><link href="https://hejohns.github.io/2023/05/02/chili-oil.html" rel="alternate" type="text/html" title="chili oil" /><published>2023-05-02T00:00:00-04:00</published><updated>2023-05-15T03:04:57-04:00</updated><id>https://hejohns.github.io/2023/05/02/chili-oil</id><content type="html" xml:base="https://hejohns.github.io/2023/05/02/chili-oil.html"><![CDATA[<p>since I always manage to forget something so simple:</p>
<ul>
  <li>take the thai chili or equivalent</li>
  <li>remove stem, and remove tip as it’s prone to burning</li>
  <li>the seeds burn slower than the flesh, so</li>
  <li>cut in half lengthwise</li>
  <li>remove the seeds and put them in a spoon</li>
  <li>cut the flesh into quarters or some sort of strip
    <ul>
      <li>if the pieces are too small, they tend to burn</li>
      <li>if the pieces are too large, it’s a waste of pepper</li>
    </ul>
  </li>
  <li>heat neutral oil in the smallest saucepan</li>
  <li>seeds in first, dump the spoon</li>
  <li>wait a bit, then fresh in</li>
  <li>high heat quickly, then immediately off to prevent burning</li>
</ul>]]></content><author><name>hejohns</name><email>(hejohns)α(umich)δ(edu)</email></author><summary type="html"><![CDATA[since I always manage to forget something so simple: take the thai chili or equivalent remove stem, and remove tip as it’s prone to burning the seeds burn slower than the flesh, so cut in half lengthwise remove the seeds and put them in a spoon cut the flesh into quarters or some sort of strip if the pieces are too small, they tend to burn if the pieces are too large, it’s a waste of pepper heat neutral oil in the smallest saucepan seeds in first, dump the spoon wait a bit, then fresh in high heat quickly, then immediately off to prevent burning]]></summary></entry><entry><title type="html">some remarks apropos scripting</title><link href="https://hejohns.github.io/2023/04/23/scripting.html" rel="alternate" type="text/html" title="some remarks apropos scripting" /><published>2023-04-23T00:00:00-04:00</published><updated>2023-05-15T03:04:57-04:00</updated><id>https://hejohns.github.io/2023/04/23/scripting</id><content type="html" xml:base="https://hejohns.github.io/2023/04/23/scripting.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#perl" id="markdown-toc-perl">Perl</a>    <ul>
      <li><a href="#the-good" id="markdown-toc-the-good">the good</a></li>
      <li><a href="#the-bad" id="markdown-toc-the-bad">the bad</a></li>
      <li><a href="#the-ugly" id="markdown-toc-the-ugly">the ugly</a></li>
      <li><a href="#profiling" id="markdown-toc-profiling">profiling</a></li>
    </ul>
  </li>
  <li><a href="#ruby" id="markdown-toc-ruby">Ruby</a>    <ul>
      <li><a href="#rbenv-bundler-solargraph-and-the-seven-dwarves" id="markdown-toc-rbenv-bundler-solargraph-and-the-seven-dwarves">rbenv, bundler, solargraph, and the seven dwarves</a></li>
      <li><a href="#parallel" id="markdown-toc-parallel">parallel</a></li>
      <li><a href="#jruby" id="markdown-toc-jruby">JRuby</a></li>
    </ul>
  </li>
  <li><a href="#haskell" id="markdown-toc-haskell">Haskell</a>    <ul>
      <li><a href="#command-line-parsing" id="markdown-toc-command-line-parsing">command line parsing</a></li>
    </ul>
  </li>
</ul>

<p>The following is a mix between a (personal) wiki and a post</p>

<h2 id="perl">Perl</h2>

<h3 id="the-good">the good</h3>
<ul>
  <li>I admit that I tend to proselytize Perl for text scripting.
Part of it is because I do find it ergonomic for simple text scripts–
my policy is that it’s great for &lt;100 line scripts. And stay away from the OO–,
but also because I think people tend to cast aside perfectly functional tools or ideas that are perceived to be <em>old</em>.
I’m a bit of a stalwart on this point.
I refuse to use <code class="language-plaintext highlighter-rouge">tmux</code> over GNU <code class="language-plaintext highlighter-rouge">screen</code>, unless I specifically need a feature one has that the other doesn’t.
Looking backwards too much has it’s own share of problems,
but as far as scripting goes, I stand by that Perl is a solid tool.</li>
  <li>ok, but specifically:</li>
  <li>the $calar-@rray-%ash distinction is quite nice. It’s far from (rich) static types, but it’s better than nothing.
I suppose nowadays other languages like Python and Ruby have static analyzers, but I don’t have any experience there unfortunately.</li>
  <li>people always say that CPAN has some really good modules.
A short list:
    <ul>
      <li>CSV (<a href="https://metacpan.org/pod/Text::CSV">Text::CSV</a>)</li>
      <li>JSON (<a href="https://metacpan.org/pod/JSON">JSON</a>)<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">1</a></sup></li>
      <li>scripting subprocesses (<a href="https://metacpan.org/pod/IPC::Run">IPC::Run</a>, <a href="https://metacpan.org/pod/Capture::Tiny">Capture::Tiny</a>).
  Comparable to Ruby’s <a href="https://docs.ruby-lang.org/en/master/Open3.html">Open3</a> gem</li>
      <li>terminal input (<a href="https://metacpan.org/pod/IO::Prompter">IO::Prompter</a>)</li>
    </ul>
  </li>
</ul>

<ul>
  <li>the backwards compatibility is superb.
Like Windows, backwards compatibility has long been a high priority for Perl,
and people will argue about the merits or demerits, but when something works (well), it’s nice when it stays that way.</li>
  <li>I have to toss in everyone’s favorite: <em>Perl regex</em>.
Regexes are almost never the right tool, but as a hack, they’re almost always almost enough.<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">2</a></sup></li>
</ul>

<h3 id="the-bad">the bad</h3>
<ul>
  <li>the parallelism story is… sad.
The only choice seems to be fork (<a href="https://metacpan.org/pod/Parallel::ForkManager">Parallel::ForkManager</a>).
<a href="https://metacpan.org/pod/Parallel::ForkManager">Perl threads</a> (see <code class="language-plaintext highlighter-rouge">man perlthrtut</code>) are “discouraged”, and there doesn’t seem to be much on CPAN.
For <a href="https://github.com/eecs490/gradescope-utils">Gradescope-Utils</a>, I ended up turning to <a href="#parallel">Ruby</a>.
In any case, this is probably a good thing.
Who in their right mind is writing a concurrent/parallel perl script?</li>
</ul>

<h3 id="the-ugly">the ugly</h3>
<ul>
  <li>every now and then, the omission or inclusion of (parentheses) changes the parse in an unexpected ways.
You eventually get used to it, but the error messages are hard to understand w/o experience.
Not as spammy as C++ stl errors<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">3</a></sup>, but at the same level of wtf.</li>
</ul>

<h3 id="profiling">profiling</h3>
<p>Now, I have to say that if you find yourself trying to profile a perl script,
you’ve made a wrong turn in life.
That said, having gone through the experience myself, some notes:</p>

<ul>
  <li>it seems like the standard profiler is <a href="https://metacpan.org/pod/Devel::NYTProf">NYTProf</a> (apparently, some folks at the Times banged it up)</li>
  <li>you may need to install w/ <code class="language-plaintext highlighter-rouge">cpanm Devel::NYTProf</code></li>
  <li>standard invocation is <code class="language-plaintext highlighter-rouge">perl -d:NYTProf script.pl</code></li>
  <li><code class="language-plaintext highlighter-rouge">nytprofhtml</code> generates some html to nytprof/ (or <code class="language-plaintext highlighter-rouge">nytprofhtml -o dir/</code>)</li>
  <li>open it in your browser.
Here’s some <a href="/assets/nytprof/index.html">sample output</a>.</li>
</ul>

<p>That is, NYTProf is <em>very</em> good.
And the above sample is “real”.
Yes, I had to wait 14 hours for one of the Gradescope-Utils scripts to finish on some student data I had to upload.</p>

<p><strong>Exercise:</strong> what in the world is that script doing?</p>

<h2 id="ruby">Ruby</h2>
<h3 id="rbenv-bundler-solargraph-and-the-seven-dwarves">rbenv, bundler, solargraph, and the seven dwarves</h3>
<p>Ruby has so many tools I often forget what I’m supposed to use.
Here’s what I’ve been doing:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">rbenv</code> to manage ruby versions, and set local versions. Seems to work well. Think <code class="language-plaintext highlighter-rouge">ghcup</code>, but with local versions as well. And no TUI that segfaults every three seconds.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">jruby</code> can’t use native gems, but otherwise seems to work quite well.
  That said, I haven’t gotten a chance to really use it since I seem to keep needing native gems.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">bundler</code> to manager per project gem dependencies. Think <code class="language-plaintext highlighter-rouge">cabal</code><sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>.
    <ul>
      <li>and <code class="language-plaintext highlighter-rouge">bundler config set --local path 'vendor/bundle'</code>. From the Jekyll documentation.</li>
      <li>and call everything with <code class="language-plaintext highlighter-rouge">bundler exec cmd</code>, to run <code class="language-plaintext highlighter-rouge">cmd</code> in the bundler ENV.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">solargraph</code> is the language server. Think HLS (ie <code class="language-plaintext highlighter-rouge">haskell-language-server-wrapper</code>).
    <ul>
      <li>at least I’ve been <code class="language-plaintext highlighter-rouge">bundler add solargraph</code> to the local directory,
  and <code class="language-plaintext highlighter-rouge">bundler exec solargraph stdio</code> for the language server.
  Could mess around with global installs.</li>
    </ul>
  </li>
  <li>TODO: <code class="language-plaintext highlighter-rouge">yard</code> is the documentation generator?
    <ul>
      <li><code class="language-plaintext highlighter-rouge">solargraph</code> needs <code class="language-plaintext highlighter-rouge">yard gems</code> or <code class="language-plaintext highlighter-rouge">bundler exec yard gems</code>? Whenever you add gems?</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">irb</code> is a repl, but you probably want to run <code class="language-plaintext highlighter-rouge">bundler console</code> instead for the gem environment. Think <code class="language-plaintext highlighter-rouge">cabal repl</code> instead of <code class="language-plaintext highlighter-rouge">ghci</code>.</li>
</ul>

<h3 id="parallel"><a href="https://github.com/grosser/parallel">parallel</a></h3>
<p>Parallel map. Works well. ‘nuff said.</p>

<p>Everyone needs parallel map.</p>

<h3 id="jruby">JRuby</h3>
<p><code class="language-plaintext highlighter-rouge">jrubyc</code> doesn’t seem to handle command line arguments properly,
but then again what’s the point of compiling ruby to JVM bytecode?</p>
<h2 id="haskell">Haskell</h2>
<p>Haskell isn’t exactly a goto scripting language,
but sometimes you really want types.</p>
<h3 id="command-line-parsing">command line parsing</h3>
<p><a href="https://hackage.haskell.org/package/optparse-generic">optparse-generic</a> works like a charm.
I wish I had this everywhere.</p>

<p>I won’t besmear the other arg parsers on Hackage, but if optparse-generic is an option, I’m using it.</p>

<hr />

<p><a href="https://github.com/grosser/parallel"></a></p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:2" role="doc-endnote">
      <p>in fact, JSON datatypes map to the Perl primitives very smoothly <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>the most egregious thing I’ve ever seen was– and I won’t name names– a perl script that git diff ‘d two latex files and inserted color commands for a colored pdf diff (as in the output was a pdf of the common parent, with colored strikeouts and insertions). As you might guess, the “parser” was a bunch of regex. It mostly worked. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:1" role="doc-endnote">
      <p>Michigan put everyone through the C++ wringer for the first couple years…. I spent every semester waiting for c++2a (now c++20) <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>v2, if that matters <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>hejohns</name><email>(hejohns)α(umich)δ(edu)</email></author></entry><entry><title type="html">rasterizing pdfs, among other things</title><link href="https://hejohns.github.io/2023/04/14/rasterize-pdfs.html" rel="alternate" type="text/html" title="rasterizing pdfs, among other things" /><published>2023-04-14T00:00:00-04:00</published><updated>2023-05-15T03:04:57-04:00</updated><id>https://hejohns.github.io/2023/04/14/rasterize-pdfs</id><content type="html" xml:base="https://hejohns.github.io/2023/04/14/rasterize-pdfs.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#rasterizingsetting-a-pdf" id="markdown-toc-rasterizingsetting-a-pdf">rasterizing/”setting” a pdf</a></li>
</ul>

<h2 id="rasterizingsetting-a-pdf">rasterizing/”setting” a pdf</h2>
<p>I don’t recall running into this before,
but I was trying to print a pdf that displayed fine on my computer (firefox, okular),
and the printer failed on the 8th page w/</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ERROR:
typecheck
OFFENDING COMMAND:
known
</code></pre></div></div>

<p>which is apparently some postscript error or incompatibility with the printer.</p>

<ul>
  <li><a href="https://superuser.com/a/1489923">rasterize pdf</a></li>
</ul>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">    pdf2djvu <span class="nt">-d</span> 1200 input.pdf <span class="o">&gt;</span> output.djvu</code></pre></figure>

<p>I don’t know how low for density (&lt;300?) is too blurry or too high unnecessary (&gt;1200?)</p>

<ul>
  <li><a href="https://superuser.com/a/100573">and convert back to pdf for printing</a></li>
</ul>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">    ddjvu <span class="nt">-format</span><span class="o">=</span>pdf output.djvu output.pdf</code></pre></figure>]]></content><author><name>hejohns</name><email>(hejohns)α(umich)δ(edu)</email></author></entry><entry><title type="html">funny sayings</title><link href="https://hejohns.github.io/2023/04/10/miserliness.html" rel="alternate" type="text/html" title="funny sayings" /><published>2023-04-10T00:00:00-04:00</published><updated>2023-05-15T03:04:57-04:00</updated><id>https://hejohns.github.io/2023/04/10/miserliness</id><content type="html" xml:base="https://hejohns.github.io/2023/04/10/miserliness.html"><![CDATA[<p>To keep track of funny sayings I’ve come across:</p>

<p>(most are inevitably heavily distorted, owing to my poor recall.
Best attempt at attribution.)
(quotes are reserved for actual, checked quotes.)</p>

<ul>
  <li>miserliness is the surest sign of general unhappiness<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></li>
  <li>you may bark, or not bark, but as part of the pack you <em>must</em> wag your tail<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></li>
  <li>TODO: (Quine’s thing about infinite cardinals, in the P-G edit)</li>
  <li>“I was send off to Tokyo in a taxi, lest I do damage to my leg–
this at Chūō Kōron expense, though I shall insist upon re-paying.
The tariff I set down for the record, since I shall probably never again have such a long taxi ride: ¥5,540. Very cheap, I say– less than a day of Mr. Hertz.<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">3</a></sup></li>
  <li>“This last fact perhaps helps to confirm a theory I have long had,
that the novel got out of hand,
that Tanizaki did not really want Taeko to be so likeable.”<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">4</a></sup></li>
  <li>“By 1965, researchers could no longer read [computability theory] papers.”<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">5</a></sup></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Kafka, English tr <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Chekhov, English tr <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>E. Seidensticker <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p><em>ibid</em>. After referring to the real life inspiration of Taeko as “coarse and vulgar”. <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p>Soare, in <em>Formalism and intuition in computability</em> <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>hejohns</name><email>(hejohns)α(umich)δ(edu)</email></author><summary type="html"><![CDATA[To keep track of funny sayings I’ve come across:]]></summary></entry><entry><title type="html">my gsi application videos</title><link href="https://hejohns.github.io/2023/04/09/gsi-applications.html" rel="alternate" type="text/html" title="my gsi application videos" /><published>2023-04-09T00:00:00-04:00</published><updated>2023-05-15T03:04:57-04:00</updated><id>https://hejohns.github.io/2023/04/09/gsi-applications</id><content type="html" xml:base="https://hejohns.github.io/2023/04/09/gsi-applications.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#engr-101-f23" id="markdown-toc-engr-101-f23">ENGR 101 (F23)</a></li>
  <li><a href="#eecs-376-f23" id="markdown-toc-eecs-376-f23">EECS 376 (F23)</a>    <ul>
      <li><a href="#too-long-version" id="markdown-toc-too-long-version">too long version</a></li>
      <li><a href="#actual-submission" id="markdown-toc-actual-submission">actual submission</a></li>
    </ul>
  </li>
</ul>

<h2 id="engr-101-f23">ENGR 101 (F23)</h2>
<p><strong>outcome</strong>: rejected.
But they also didn’t look at the video<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/Cd9Tq7s_BhQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<style> .pdf-embed-wrap-1835650b-5b54-44c3-a909-c5b563f601cb { display: flex; flex-direction: column; width: 100%; height: 650px; } .pdf-embed-container-1835650b-5b54-44c3-a909-c5b563f601cb { height: 100%; } .pdf-link-1835650b-5b54-44c3-a909-c5b563f601cb { background-color: white; text-align: center; border-style: solid; } .pdf-embed-container-1835650b-5b54-44c3-a909-c5b563f601cb iframe { width: 100%; height: 100%; } </style>
<div class="pdf-embed-wrap-1835650b-5b54-44c3-a909-c5b563f601cb"> <div class="pdf-link-1835650b-5b54-44c3-a909-c5b563f601cb"> <a href="/files/101-gsi-application.pdf" target="_blank">View PDF</a> </div> <div class="pdf-embed-container-1835650b-5b54-44c3-a909-c5b563f601cb"> <iframe src="/files/101-gsi-application.pdf" frameborder="0" allowfullscreen=""></iframe> </div> </div>
<h2 id="eecs-376-f23">EECS 376 (F23)</h2>

<h3 id="too-long-version">too long version</h3>
<iframe width="560" height="315" src="https://www.youtube.com/embed/UyT7Oa6Gxdc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
<h3 id="actual-submission">actual submission</h3>
<iframe width="560" height="315" src="https://www.youtube.com/embed/2S60JnY5zus" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>I dumb and got “private” and “unlisted” backwards. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>hejohns</name><email>(hejohns)α(umich)δ(edu)</email></author></entry><entry><title type="html">this jekyll site’s _plugins</title><link href="https://hejohns.github.io/site-construction/2023/04/07/underscore-plugins.html" rel="alternate" type="text/html" title="this jekyll site’s _plugins" /><published>2023-04-07T00:00:00-04:00</published><updated>2023-05-15T03:04:57-04:00</updated><id>https://hejohns.github.io/site-construction/2023/04/07/underscore-plugins</id><content type="html" xml:base="https://hejohns.github.io/site-construction/2023/04/07/underscore-plugins.html"><![CDATA[<p>this page is generated by the plugin source below:</p>
<h2 id="hook-_pluginsrb">hook-_plugins.rb</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># automatically build the content about this site's _plugins
Jekyll::Hooks.register :site, :after_init do |site|
  acc = []
  Dir.each_child("_plugins"){ |filename|
    acc.push("## #{filename}\n#{(File.readlines(File.join("_plugins", filename)).map {|line| "    #{line}"}).join()}\n")
  }
  site.config['about-_plugins'] = "this page is generated by the plugin source below:\n#{acc.join()}"
end
</code></pre></div></div>

<h2 id="hook-jekyll-versionrb">hook-jekyll-version.rb</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># variables I want in my posts
# (I wish I could write the ruby directly in the page sources.)
Jekyll::Hooks.register :site, :after_init do |site|
  site.config['ruby-version'] = RUBY_DESCRIPTION
  site.config['jekyll-version'] = Gem.loaded_specs['jekyll'].version.version
end
</code></pre></div></div>

<h2 id="no_daterb">no_date.rb</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># https://stackoverflow.com/a/68287682
class Jekyll::PostReader
  # monkey patch `Jekyll::PostReader::read_posts` so we don't have to write the
  # date in the post filename
  #
  # see the jekyll source
  def read_posts(dir)
    read_publishable(dir, "_posts", Jekyll::Document::DATELESS_FILENAME_MATCHER)
  end
end
</code></pre></div></div>]]></content><author><name>hejohns</name><email>(hejohns)α(umich)δ(edu)</email></author><category term="site-construction" /><summary type="html"><![CDATA[this page is generated by the plugin source below: hook-_plugins.rb # automatically build the content about this site's _plugins Jekyll::Hooks.register :site, :after_init do |site| acc = [] Dir.each_child("_plugins"){ |filename| acc.push("## #{filename}\n#{(File.readlines(File.join("_plugins", filename)).map {|line| " #{line}"}).join()}\n") } site.config['about-_plugins'] = "this page is generated by the plugin source below:\n#{acc.join()}" end hook-jekyll-version.rb # variables I want in my posts # (I wish I could write the ruby directly in the page sources.) Jekyll::Hooks.register :site, :after_init do |site| site.config['ruby-version'] = RUBY_DESCRIPTION site.config['jekyll-version'] = Gem.loaded_specs['jekyll'].version.version end no_date.rb # https://stackoverflow.com/a/68287682 class Jekyll::PostReader # monkey patch `Jekyll::PostReader::read_posts` so we don't have to write the # date in the post filename # # see the jekyll source def read_posts(dir) read_publishable(dir, "_posts", Jekyll::Document::DATELESS_FILENAME_MATCHER) end end]]></summary></entry></feed>
